package es.reaktor.reaktorclient.scheduled_task;

import es.reaktor.models.Malware;
import es.reaktor.reaktorclient.models.Reaktor;
import es.reaktor.reaktorclient.utils.BeepSound;
import es.reaktor.reaktorclient.utils.CommandExecutor;
import es.reaktor.reaktorclient.utils.HttpCommunicationSender;
import es.reaktor.reaktorclient.utils.MessageSender;
import es.reaktor.reaktorclient.utils.exceptions.ConstantsErrors;
import es.reaktor.reaktorclient.utils.exceptions.ReaktorClientException;
import es.reaktor.reaktorclient.windows.WindowsMalware;
import jakarta.annotation.PostConstruct;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Component
@Data
@Slf4j
public class SearchMalware
{

    @Autowired
    private HttpCommunicationSender httpCommunicationSender;

    @Autowired
    private CommandExecutor commandExecutor;

    @Autowired
    private Reaktor reaktor;

    @Autowired
    private WindowsMalware windowsMalware;

    @Autowired
    private BeepSound beepSound;

    private Boolean isAdministrator;

    private MessageSender messageSender;

    private List<Malware> cloneList;

    private boolean reported = true;

    private boolean firstTimeAdmin = true;

    @Value("${reaktor.server.url}")
    private String reaktorServerUrl;

    @PostConstruct
    public void init()
    {
        this.messageSender = new MessageSender(this.commandExecutor);
    }

    @Scheduled(fixedDelayString = "${reaktor.malwareReport}", initialDelay = 2000)
    public void searchMalware()
    {
        if (!this.reaktor.getMotherboard().getIsAdmin())
        {
            List<Malware> malwareListInThisPc = this.windowsMalware.getMalwareListInThisPc();

            try
            {
                if (!malwareListInThisPc.isEmpty())
                {
                    log.info(this.httpCommunicationSender.sendPost(this.httpCommunicationSender.createHttpPostMalwareList(this.reaktorServerUrl + "/report-malware", this.reaktor.getMotherboard().getMotherBoardSerialNumber(), malwareListInThisPc)));

                    if (!this.equalsListMalware(this.cloneList, malwareListInThisPc))
                    {
                        this.cloneList = malwareListInThisPc;
                        this.messageSender.setMalware(this.nombresMalware(malwareListInThisPc));
                        this.messageSender.start();
                        this.messageSender = new MessageSender(this.commandExecutor);
                    }

                    this.beepSound.start();
                    this.beepSound = new BeepSound(this.commandExecutor);

                    this.reported = true;

                } else if (this.reported)
                {
                    this.httpCommunicationSender.sendPost(this.httpCommunicationSender.createHttpPostMalwareList(this.reaktorServerUrl + "/report-malware", this.reaktor.getMotherboard().getMotherBoardSerialNumber(), malwareListInThisPc));
                    this.reported = false;
                }
            }
            catch (ReaktorClientException reaktorClientException)
            {
                log.warn(reaktorClientException.getMessage());
                log.warn(ConstantsErrors.ERROR_COMMUNICATION_TO_SERVER, reaktorClientException);
                reaktorClientException.printStackTrace();
            }
        }
        else
        {
            if (firstTimeAdmin)
            {
                try
                {
                    log.warn("El usuario es administrador, no se puede realizar la busqueda de malware");
                    this.httpCommunicationSender.sendPost(this.httpCommunicationSender.createHttpPostMalwareList(this.reaktorServerUrl + "/report-malware", this.reaktor.getMotherboard().getMotherBoardSerialNumber(), new ArrayList<>()));
                    firstTimeAdmin = false;
                }
                catch (ReaktorClientException reaktorClientException)
                {
                    log.warn(reaktorClientException.getMessage());
                    log.warn(ConstantsErrors.ERROR_COMMUNICATION_TO_SERVER, reaktorClientException);
                    reaktorClientException.printStackTrace();
                }
            }
        }
    }

    private boolean equalsListMalware(List<Malware> cloneList, List<Malware> malwareListInThisPc)
    {

        if (cloneList == null || malwareListInThisPc == null)
        {
            return false;
        }

        if (cloneList.size() != malwareListInThisPc.size())
        {
            return false;
        }

        if (cloneList.isEmpty() && malwareListInThisPc.isEmpty())
        {
            return true;
        }

        cloneList.sort(Comparator.comparing(Malware::getName));
        malwareListInThisPc.sort(Comparator.comparing(Malware::getName));

        for (int i = 0; i < cloneList.size(); i++)
        {
            if (!malwareListInThisPc.get(i).getName().equals(cloneList.get(i).getName()))
            {
                return false;
            }
        }

        return true;
    }

    private String nombresMalware(List<Malware> malwareListInThisPc)
    {
        StringBuilder nombresMalware = new StringBuilder();

        for (Malware malware : malwareListInThisPc)
        {
            nombresMalware.append(malware.getName()).append(", ");
        }

        return nombresMalware.toString();
    }
}